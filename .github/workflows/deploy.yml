name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run-tests:
    uses: ./.github/workflows/test.yml

  deploy:
    name: "Deploy to VPS"
    needs: run-tests
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      deploy_status: ${{ job.status }}
    steps:
      - name: Simulate deployment failure
        run: exit 1
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy-key.pem
          chmod 600 ~/.ssh/deploy-key.pem
          cat >> ~/.ssh/config <<END
          Host my-vps
            HostName $SSH_IP
            User $SSH_USER
            IdentityFile ~/.ssh/deploy-key.pem
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_IP: ${{ secrets.SSH_IP }}
      - name: Deploy Site
        run: |
          ssh my-vps << 'EOF'
            cd '${{ secrets.PROJECT_ROOT }}'
            git fetch && git reset origin/main --hard > /dev/null
            rm -f ../redeploy-site.sh
            cp -f redeploy-site.sh ..
            cd ..
            chmod +x redeploy-site.sh
            ./redeploy-site.sh
          EOF
      - name: Print Docker Containers
        run: ssh my-vps 'docker ps'
      - name: Send Discord Success Message
        run: curl -s -X POST "${{ secrets.DISCORD_WEBHOOK }}" -d "content=ðŸš€ Deployment Successful"

  fallback:
    needs: deploy
    if: ${{ needs.deploy.result == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Failure Message
        run: curl -s -X POST "${{ secrets.DISCORD_WEBHOOK }}" -d "content=ðŸš¨ Deployment Failed"
